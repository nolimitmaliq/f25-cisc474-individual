/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as InstructorRouteImport } from './routes/instructor'
import { Route as HomeRouteImport } from './routes/home'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as StudentsIndexRouteImport } from './routes/students/index'
import { Route as StudentsCreateRouteImport } from './routes/students/create'
import { Route as StudentsIdRouteImport } from './routes/students/$id'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const InstructorRoute = InstructorRouteImport.update({
  id: '/instructor',
  path: '/instructor',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const StudentsIndexRoute = StudentsIndexRouteImport.update({
  id: '/students/',
  path: '/students/',
  getParentRoute: () => rootRouteImport,
} as any)
const StudentsCreateRoute = StudentsCreateRouteImport.update({
  id: '/students/create',
  path: '/students/create',
  getParentRoute: () => rootRouteImport,
} as any)
const StudentsIdRoute = StudentsIdRouteImport.update({
  id: '/students/$id',
  path: '/students/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/home': typeof HomeRoute
  '/instructor': typeof InstructorRoute
  '/login': typeof LoginRoute
  '/students/$id': typeof StudentsIdRoute
  '/students/create': typeof StudentsCreateRoute
  '/students': typeof StudentsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/home': typeof HomeRoute
  '/instructor': typeof InstructorRoute
  '/login': typeof LoginRoute
  '/students/$id': typeof StudentsIdRoute
  '/students/create': typeof StudentsCreateRoute
  '/students': typeof StudentsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRoute
  '/home': typeof HomeRoute
  '/instructor': typeof InstructorRoute
  '/login': typeof LoginRoute
  '/students/$id': typeof StudentsIdRoute
  '/students/create': typeof StudentsCreateRoute
  '/students/': typeof StudentsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/home'
    | '/instructor'
    | '/login'
    | '/students/$id'
    | '/students/create'
    | '/students'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin'
    | '/home'
    | '/instructor'
    | '/login'
    | '/students/$id'
    | '/students/create'
    | '/students'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/home'
    | '/instructor'
    | '/login'
    | '/students/$id'
    | '/students/create'
    | '/students/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRoute
  HomeRoute: typeof HomeRoute
  InstructorRoute: typeof InstructorRoute
  LoginRoute: typeof LoginRoute
  StudentsIdRoute: typeof StudentsIdRoute
  StudentsCreateRoute: typeof StudentsCreateRoute
  StudentsIndexRoute: typeof StudentsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/instructor': {
      id: '/instructor'
      path: '/instructor'
      fullPath: '/instructor'
      preLoaderRoute: typeof InstructorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/students/': {
      id: '/students/'
      path: '/students'
      fullPath: '/students'
      preLoaderRoute: typeof StudentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/students/create': {
      id: '/students/create'
      path: '/students/create'
      fullPath: '/students/create'
      preLoaderRoute: typeof StudentsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/students/$id': {
      id: '/students/$id'
      path: '/students/$id'
      fullPath: '/students/$id'
      preLoaderRoute: typeof StudentsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRoute,
  HomeRoute: HomeRoute,
  InstructorRoute: InstructorRoute,
  LoginRoute: LoginRoute,
  StudentsIdRoute: StudentsIdRoute,
  StudentsCreateRoute: StudentsCreateRoute,
  StudentsIndexRoute: StudentsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
