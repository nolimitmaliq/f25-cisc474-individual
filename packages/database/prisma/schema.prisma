generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  user_id    String      @id @default(cuid())
  bio        String?
  email      String?      @unique
  password   String?
  name       String?
  lastname   String?
  role       Role        @default(Student)
  Admin      Admin?
  Instructor Instructor?
  student    Student?
  authentications   Authentication[]
}

model Authentication {
    id         String   @id @default(uuid())
    userId     String
    provider   String
    providerId String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       Users     @relation(fields: [userId], references: [user_id], onDelete: Cascade)

    @@index([provider, providerId])
}

model Student {
  id            String            @id @default(cuid())
  userId        String            @unique
  emailVerified DateTime?
  major         String?
  enrollments   CoursesEnrolled[]
  user          Users             @relation(fields: [userId], references: [user_id])
  submissions   Submission[]
}

model Instructor {
  id         String    @id @default(cuid())
  userId     String    @unique
  department String?
  office     String?
  user       Users     @relation(fields: [userId], references: [user_id])
  sections   Section[]
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   Users  @relation(fields: [userId], references: [user_id])
}

model Course {
  id            String             @id @default(cuid())
  title         String
  description   String?
  credits       Int
  code          String             @unique
  assignments   CourseAssignment[]
  enrollments   CoursesEnrolled[]
  announcements Message[]
  sections      Section[]
}

model CoursesEnrolled {
  id             String   @id @default(cuid())
  studentId      String
  courseId       String
  FinalGrade     Float?
  enrollmentDate DateTime @default(now())
  sectionId      String
  course         Course   @relation(fields: [courseId], references: [id])
  section        Section  @relation(fields: [sectionId], references: [id])
  student        Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, sectionId])
  @@index([studentId, courseId, sectionId])
  @@index([studentId])
  @@index([sectionId])
  @@index([courseId])
}

model CourseAssignment {
  id          String       @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]
}

model Submission {
  id             String           @id @default(cuid())
  submissionDate DateTime         @default(now())
  status         SubmissionStatus @default(Submitted)
  grade          Int?
  content        String?
  studentId      String
  assignmentId   String
  assignment     CourseAssignment @relation(fields: [assignmentId], references: [id])
  student        Student          @relation(fields: [studentId], references: [id])

  @@unique([studentId, assignmentId])
  @@index([studentId])
  @@index([assignmentId])
}

model Message {
  id          String   @id @default(cuid())
  title       String
  content     String
  DateCreated DateTime @default(now())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id])
}

model Section {
  id           String            @id @default(cuid())
  semester     Semester
  name         String
  code         String
  year         Int
  courseID     String
  instructorId String
  enrollments  CoursesEnrolled[]
  course       Course            @relation(fields: [courseID], references: [id])
  instructor   Instructor        @relation(fields: [instructorId], references: [id])

  @@unique([courseID, year, semester, code])
}

enum Role {
  Student
  Admin
  Instructor
}

enum Semester {
  Fall
  Spring
  Summer
}

enum SubmissionStatus {
  Submitted
  Graded
}
